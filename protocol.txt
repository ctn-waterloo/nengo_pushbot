Protocol for SpiNNaker <-> PushBot 

- PushBot has a key stem (indicating virtual x,y,p location in SpiNNaker network)
    - default: FE FF F8 00 (bottom 11 bits must be zero)
    - settable somehow (perhaps by adjusting firmware? or via UDP command?)
    - each type of sensor/motor gets an identifier
    - each (non-retina) sensor fires values at a regular rate
        - would be best to stagger the packets over that period, rather than as a
          burst of data (although the serial communication might do this for us 
          for free)
    
- PushBot -> SpiNNaker
    - Retina event causes multicast packet
        id: 30
        key: key | id<<6
        payload: xxxxxxxx xxxxxxxx syyyyyyy yyyyyyyy
    - Greyscale
        id: 29
        key: key | id<<6
        payload: xxxxxxxx xxxxyyyy yyyyyyyy vvvvvvvv
    - Other sensors
        One packet sent per dimension of the sensor (dimension is # of values)
        payload: 32-bit value in S1615 format where the 
                 expected sensor range is -1 to 1
        dimension: 6-bit value
        id: as per table below
        key: key | id<<6 | dim
        
            Sensor name     id          dims (# of values)
            BATTERY         0           1
            ADC_CHANNEL0    1           1
            ADC_CHANNEL1    2           1
            ADC_CHANNEL2    3           1
            ADC_CHANNEL3    4           1
            ADC_CHANNEL4    5           1
            ADC_CHANNEL5    6           1
            GYROMETER       7           3
            ACCELEROMETER   8           3
            EULER_ANGLES    9           3
            COMPASS         10          4                    
            IMU_DATA        11          13
            PWM_SIGNALS     12          2
            MOTOR_CURRENTS  13          2
            WHEEL_ENCODER   22          2    
            WHEEL_COUNTER   23          2
            
            To convert from a float value to S1615, do this:            
               (int)(value * 2**15)
            so for each of the above sensor readings, scale them as:
               (int)(((float)value)/maximum_value * 2**15)
               
            Exception: the WHEEL_ENCODER has a huge range, so we just send
               value & 0x7FFFFFFF
            
        example: Compass data of (90000, -45000, 135000) creates 3 packets
                 (maximum value is 180000)
          packet 1:
            key = key | 10<<6 | 0
            value = 0b00000000 00000000 01000000 00000000
          packet 2:
            key = key | 10<<6 | 0b000001 
            value = 0b11111111 11111111 11100000 00000000
          packet 3:
            key = key | 10<<6 | 0b000010 
            value = 0b00000000 00000000 01100000 00000000
            
        
- SpiNNaker -> PushBot
   - on receive packet, look at bottom 11 bits of key
       - 5 bits for id, 6 bits for dimension
       - iiiiidddddd
   - payload: value    
       - always in S1615
       - to convert to integer: (value*maximum_value)>>15
       - to convert to boolean: (value & 0xA000)
           
   - id for outputs
        Track power    id: 0   dimensions: 2 (left, right)
        Track speed    id: 1   dimensions: 2 (left, right)
        Top LED        id: 2   dimensions: 3 (freq, front?, back?)
        Beep           id: 3   dimensions: 2 (freq, on?)
        Laser pointer  id: 4   dimensions: 2 (freq, on?)        
        Digital out    id: 8   dimensions: 6
        Raw PWM        id: 9   dimensions: 2
        
    - Special streaming configuration packet    
        Config streams id: 31  dimensions: 2 (camera, sensors)
          for dimension 0, this controls the !S streaming
            payload: pppppppp ffffffff ffffffff ffffffff
                where p is the period in milliseconds and f are 24 flags
            This is converted directly into a !S+,f,p streaming command
            
              Note that the ids listed here are in the same order as the bit
              flags in the robot spec at 
                  https://wiki.lsr.ei.tum.de/nst/documentation/edvs-4337      
              with the exception of id 14 and id 15
        
          for dimension 1, this just controls !E+ or !E-
            if payload is 0, this is !E-
            if payload is 1, this is !E+
            
        
- UDP in/out is handled via standard SpiNNaker IPTags

        
        
                                                            
                                                            
Examples:
  SpiNNaker -> PushBot
  
    Set right motor output to 50:
        key = ******** ******** *****000 01000001   (id=1, dim=1)
        payload = 00000000 00000000 01000000 00000000
            (value = (payload*100)>>15 = 50)
        command: "!M1=50\n"
        
    Turn on camera streaming:
        key = ******** ******** *****111 11000001   (id=31, dim=1)    
        payload = 00000000 00000000 00000000 00000001
        command = "!E+\n"
        
    Turn off camera streaming:
        key = ******** ******** *****111 11000001   (id=31, dim=1)    
        payload = 00000000 00000000 00000000 00000000
        command = "!E-\n"
        
    Turn on gyro and battery streaming every 10ms:
        key = ******** ******** *****111 11000000   (id=31, dim=0)    
        payload = 0000000A 00000000 00000100 10000000
        command = "!S-,65535,10\n!S+,2304,10\n"
        
        
  PushBot -> SpiNNaker
    On spike at x=3, y=7:
        streaming data: 00000011 00000111
        key = 11111110 11111111 11111111 10000000
        payload = 00000000 00000011 00000000 00000111
        
    Off spike at x=31, y=15:
        streaming data: 00011111 10001111
        key = 11111110 11111111 11111111 10000000
        payload = 00000000 00011111 10000000 00001111
        
    Compass 2nd value of 45000:
        streaming data: "+045000"        
        key = 11111110 11111111 11111010 10000010    (id=10, dim=2)
        payload = 00000000 00000000 00100000 00000000 
        
        
        
        
        
        
        
        
       
       
       
           
        
            
        
        
    
    
    
    
